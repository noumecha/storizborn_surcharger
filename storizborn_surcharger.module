<?php

use \Drupal\Core\Form\FormStateInterface;

/**
 *
 * @file
 * Primary module hooks for storizborn_surcharger module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * implement hook_preprocess_HOOK
 */
function storizborn_surcharger_preprocess_block__aggregator(&$vars) {
  if (isset($vars['base_plugin_id']) && $vars['base_plugin_id'] == 'aggregator_feed_block') {
    $vars['content']['list']['#theme'] = 'storizborn_surcharger_aggregator';
  }
  
  // dump($vars);
}

/**
 * 
 * implement hook_preprocess_menu
 * this for change the viewer of the tools menu
 * 
 */
function storizborn_surcharger_preprocess_menu(&$vars) {
  if (isset($vars['theme_hook_original']) && $vars['theme_hook_orginal'] = 'menu__tools'){
    if($vars['menu_name'] == 'tools'){
      $vars['attributes']['class']=['st_block__items_menu'];
    }
    foreach($vars['items'] as $item)
    {
      /**
       *
       * @var \Drupal\Core\Template\Attribute $attribute
       */
      $attribute = $item['attributes'];
      $attribute->addClass('st_block__items');
    }
    //dump($vars['items']);
  }  

}

/**
 * implement hook_preprocess_container
 */
function storizborn_surcharger_preprocess_container(&$vars) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  if (isset($vars['theme_hook_original']) && $vars['theme_hook_original'] == 'container' && ($routeName == 'view.actualites.page_1' || $routeName == 'entity.taxonomy_term.canonical')) {
    if (isset($vars['attributes']['class']) && is_array($vars['attributes']['class']))
      array_push($vars['attributes']['class'], 'container');
    else {
      $vars['attributes']['class'] = [
        'container'
      ];
    }
    // dump($vars);
  }
}

/**
 * implement template_preprocess_book_navigation() for navigation
 */
/*
 * function storizborn_surcharger_preprocess_book_navigation($vars)
 * {
 * dump($vars);
 * return [
 * '#theme'=>'storizborn_surcharger_bn',
 * 'element' => []
 * ];
 * }
 */

/**
 * implements hook_theme()
 */
function storizborn_surcharger_theme() {
  // pre-formatage pour les flux rss
  $hooks['storizborn_surcharger_aggregator'] = [
    'render element' => 'element',
    'preprocess functions' => [
      'template_preprocess_storizborn_surcharger_aggregator'
    ],
    'file' => 'storizborn_surcharger.theme.inc'
  ];
  // pre-formatage pour le ...
  $hooks['storizborn_surcharger_bn'] = [
    'render element' => 'element',
    'preprocess functions' => [
      'template_preprocess_storizborn_surcharger_bn'
    ],
    'file' => 'storizborn_surcharger.theme.inc'
  ];
  return $hooks;
}

/**
 * permet de changer l'utilisateur d'un node.
 *
 * @param array $vars
 */
function storizborn_surcharger_preprocess_node(&$vars) {
  
  // if (!empty($vars['elements']['#node'])) {
  // /**
  // *
  // * @var \Drupal\node\Entity\Node $node
  // */
  // $node = $vars['elements']['#node'];
  // if ($node->getOwnerId() != 1) {
  // $node->setOwnerId(1);
  // $node->save();
  // }
  // }
}
/**
 * 
 * implements hook_form_alter
 * 
 */
function storizborn_surcharger_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['actions']['submit']['#access'] = FALSE;
  $form['keys']['#attributes']['placeholder'] = t('Entrez votre recherche ici');
  //dump($form);
}